#!/usr/bin/env ruby
# vim: ft=ruby:

require "yaml"

class VimI18n

  DELIMITER = "."

  def initialize(path, key, value)
    @path, @key, @value = path, key, value
  end

  def self.perform(*args)
    new(*args).perform
  end

  def perform
    keys = key.split(DELIMITER)
    hash = data

    keys.each do |k|
      last = keys.index(k) == keys.length - 1
      case hash[k]
      when Hash
        raise ArgumentError, "Hash value already present" if last
      when String
        raise ArgumentError, "String value already present"
      when NilClass
        if last
          hash[k] = value
        else
          hash[k] = {}
        end
      end

      hash = hash[k]
    end

    File.open(path, 'w') {|f| f.write(YAML.dump(data)) }
  end

  private

  attr_reader :path, :key, :value

  def data
    @data ||= File.exists?(path) ? YAML.load_file(path) : {}
  end

end


VimI18n.perform(File.expand_path(ARGV[0]), [ File.basename(ARGV[0].strip, ".yml"), ARGV[1].strip ].join("."), ARGV[2].strip.chomp)
